#!/bin/bash

source color.sh

NEW_CARDS_PER_DAY="20"

DECKS="$(find -maxdepth 1 -type d | tail +2)"
DATE_S="$(date +%s)"
DATE_D="$((DATE_S/86400))"

NONEW=""
NOMOVE=""
BOXES=""

is_benk_directory() {
    if [ ! -d 0 ] ; then
        printf "This doesn't look like a benk directory\n"
        return 1
    fi
}

benk_run_card() {
    FRONT="$(sed -e '1!d' "$1")"
    BACK="$(sed -e '2!d' "$1")"

    set_fg "$COLOR_YELLOW"
    printf "$FRONT"
    read < /dev/tty
    set_fg "$COLOR_GREEN"
    printf "$BACK\n"
    reset_fg
    printf "Got it? "
    set_bold
    printf "[Y/n] "
    reset_bold
    read CHOICE < /dev/tty

    sed -i "3s/.*$/$DATE_D/" "$1"

    if [ "$CHOICE" = "n" ] ; then
        return 1
    else
        return 0
    fi
}

benk_move_card() {
    CARD="${1##*/}"
    BOX="${1%/*}"
    
    if [ -z "$BOXES" ] ; then
        printf "Error: can't move card, no boxes loaded\n" > /dev/tty
        return 1
    fi

    NEXT_BOX="9999999"

    for i in $BOXES ; do
        BOX_NB="${i##*/}"
        if [ "$BOX_NB" -lt "$NEXT_BOX" -a "$BOX_NB" -gt "$BOX" ] ; then
            NEXT_BOX="$BOX_NB"
        fi
    done

    case "$2" in
        up)
            if [ "$NEXT_BOX" -lt 9999999 ] ; then
                BOX="$NEXT_BOX"
                mv "$1" "$BOX"
            fi
            ;;
        down)
            if [ "$BOX" != 0 ] ; then
                BOX="0"
                mv "$1" "$BOX/"
            fi
            ;;
    esac
    printf "$BOX/$CARD"
}

benk_load_box() {
    TIME_INTERVAL="$(basename "$1")"
    CARDS="$(find "$1" -type f)"

    if [ -n "$CARDS" ] ; then
        while read -r card; do
            LAST_DATE_D="$(sed -e '3!d' "$card")"
            LAST_TIME_D="$((DATE_D - LAST_DATE_D))"

            if [ "$LAST_TIME_D" -ge "$TIME_INTERVAL" ] ; then
                printf "$card\n"
            fi
        done <<< "$CARDS"
    fi
}

benk_load_deck() {
    STACK=""

    while read -r box; do
        TMP="$(benk_load_box "$box")"
        if [ "$(basename "$box")" -eq "0" ] ; then
            TMP="$(echo "$TMP" | head -n "$NEW_CARDS_PER_DAY")"
        fi
        if [ -n "$TMP" ] ; then
            echo "Loading $(echo "$TMP" | wc -l) from box $box" > /dev/tty
            STACK="$STACK$TMP\n"
        fi
    done <<< "$BOXES"
    printf "$STACK"
}

benk_select_boxes() {
    BOXES="$(find . -type d | grep -o "[0-9]*")"
    test -n "$BOXES" || return 1
}

benk_train() {
    is_benk_directory || return 1
    benk_select_boxes || return 1
    STACK="$(benk_load_deck)"

    if [ -n "$STACK" ] ; then
        LEFT="$(wc -l <<< "$STACK")"
        AGAIN="0"

        while [ -n "$STACK" ] ; do
            read card <<< "$STACK"
            set_bold
            printf "["
            set_fg "$COLOR_BLUE" ; printf "$LEFT" ; reset_fg
            printf "|"
            set_fg "$COLOR_RED" ; printf "$AGAIN" ; reset_fg
            printf "]\n"
            reset_bold
            if ! benk_run_card "$card" ; then
                card="$(benk_move_card "$card" "down")"
                STACK="$STACK\n$card\n"
                AGAIN="$((AGAIN+1))"
            else
                benk_move_card "$card" "up" > /dev/null
            fi

            STACK="$(printf "$STACK" | tail +2)"
            LEFT="$((LEFT-1))"

            if [ "$LEFT" = "0" ] ; then
                LEFT="$AGAIN"
                AGAIN="0"
            fi
        done
    else
        printf "Nothing to learn today\n"
        exit 0
    fi
}

benk_init() {
    for i in 0 1 2 5 10 25 ; do
        mkdir "$i" || return 1
    done
}

benk_add_card() {
    CARDNAME="$(date +%y%m%d%H%M%S)"

    printf "%s\n%s\nnever\n" "$1" "$2" > "0/$CARDNAME"
}

benk_add() {
    is_benk_directory || return 1

    while true ; do
        printf "Front:\n"
        read FRONT
        printf "Back:\n"
        read BACK

        if [ -n "$FRONT" -a -n "$BACK" ] ; then
            benk_add_card "$FRONT" "$BACK"
        else
            exit 0
        fi
    done
}

benk_search() {
    if [ -n "$1" ] ; then
        RES="$(grep -r "$1" --exclude-dir=".git" | cut -d: -f1)"
        for i in $RES ; do
            set_bold
            printf "$i:\n"
            reset_bold
            cat "$i"
        done
    fi
}

benk_help() {
    printf "Usage: $0 <command>\n"
    printf "Commands:\n"
    printf "    train <deck>: train on the given card deck\n"
    printf "    new <deck>: create a new deck with the specified name\n"
    printf "    add <deck>: add cards to the new deck\n"
    printf "    search <deck> <expr>: displays all cards matching <expr>\n"
}

case "$1" in
    init)
        benk_init "$2"
        ;;
    train)
        benk_train "$2"
        ;;
    add)
        benk_add "$2"
        ;;
    search)
        benk_search "$3"
        ;;
    *)
        benk_help
        ;;
esac
